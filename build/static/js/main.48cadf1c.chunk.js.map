{"version":3,"sources":["ClassAndFunctions.js","ConditionalRendering.js","EventHandler.js","LifeCycle.js","ListRendering.js","FunctionHooks.js","App.js","index.js"],"names":["Component","FunctionHooks","useState","count","setCount","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"sNAegCA,YCZGA,YCARA,YCAHA,YCAIA,Y,YC+CbC,MAlBf,WAEI,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OACI,gCACA,6CAAgBD,EAAhB,YACA,wBAAQE,QAPa,WACrBD,EAASD,EAAQ,IAMjB,0BC3BFG,E,4JACF,WACI,OAAO,mCAOP,cAAC,EAAD,U,GATUN,aA0CHM,ICtCfC,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,W","file":"static/js/main.48cadf1c.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\n//Components\n// Component is very similar to function, it helps write reusable code\n// Components allow you to create the basic structure once and resuse as many time as u wants \n// There are two types of components \n// 1.class Component \n// 2.function Component\n\n// ------------------------------Session 1------------------------------\n// In this tutorial we're going to learn about Class Components as well as JSX. \n// JSX is nothing more than syntactic sugar for React.createElement \n// which allows us to more easily develop UI due to the fact of its similarity with HTML. \n// Components allow us to break down our webpage into smaller reusable pieces of UI.\n\nclass ClassAndFunctions extends Component{\n    render(){\n        return <>\n        <h1>App Component</h1>\n        <h3>App Component</h3>\n        </>\n    }\n\n    //------------fragment-----------------\n    // render(){\n    //     return (\n    //     <>\n    //         <h1>App Component</h1>\n    //         <h3>new tag</h3>\n    //     </>\n    //     )\n    // }\n\n    //-------------need closing tag-----------\n    // render(){\n    //     return (\n    //     <>\n    //         <h1>App Component</h1>\n    //         <br/>\n    //         <h3>new tag</h3>\n    //     </>\n    //     )\n    // }\n\n    //-------------how to use js in jsx syntax---------\n    // render(){\n    //     const num1 = 1;\n    //     const num2 = 2;\n    //          return (\n    //         <>\n    //             <h1>App Component</h1>\n    //             <h3>testing js code</h3>\n    //             <span>{1 + 1}</span><br/>\n    //             <span>{num1 + num2}</span>\n    //             <h2>{new Date().toLocaleString()}</h2>\n\n    //         </>\n    //         )\n    //     }\n\n    //---------------how to call functions in class component & jsx-------------\n    // add(num1, num2){\n    //     return num1 + num2;\n    // }\n\n    //   render(){\n    //     const num1 = 1;\n    //     const num2 = 2;\n    //          return (\n    //         <>\n    //             <h1>App Component</h1>\n    //             <h3>testing js code</h3>\n    //             <span>{1 + 1}</span><br/>\n    //             <span>{num1 + num2}</span>\n    //             <h2>{new Date().toLocaleString()}</h2>\n    //             <h2>{this.add(1,1)}</h2>\n\n    //         </>\n    //         )\n    //     }\n\n    //----------------how to use object call in jsx----------------------\n    //     add(num1, num2){\n    //         return num1 + num2;\n    //     }\n\n    //   render(){\n    //     const num1 = 1;\n    //     const num2 = 2;\n    //     const someObj = {name : \"Salim\", age : \"25\"}\n    //          return (\n    //         <>\n    //             <h1>App Component</h1>\n    //             <h3>testing js code</h3>\n    //             <span>{1 + 1}</span><br/>\n    //             <span>{num1 + num2}</span>\n    //             <h2>{new Date().toLocaleString()}</h2>\n    //             <h2>{this.add(1,1)}</h2>\n    //         </>\n    //         )\n    //     }\n\n    //---------------conditional expresion in react jsx------------------\n    //     add(num1, num2){\n    //         return num1 + num2;\n    //     }\n\n    //   render(){\n    //     const num1 = 1;\n    //     const num2 = 2;\n    //     const someObj = {name : \"Salim\", age : \"25\"}\n    //          return (\n    //         <>\n    //             <h1>App Component</h1>\n    //             <h3>testing js code</h3>\n    //             <span>{1 + 1}</span><br/>\n    //             <span>{num1 + num2}</span>\n    //             <h2>{new Date().toLocaleString()}</h2>\n    //             <h2>{this.add(1,1)}</h2>\n    //             <h1>My Name is {someObj.name}, my age is {someObj.age}</h1>\n    //             {3 > 2 ? \"3 is bigger than 2\" : \"its not\"}\n    //             {true && <h1>Thing i want to render</h1>}\n    //         </>\n    //         )\n    //     }\n\n    //------------------return jsx in jsx via function-------------------------\n    //     add(num1, num2){\n    //         return num1 + num2;\n    //     }\n\n    //     someJSX(){\n    //         return (\n    //             <>\n    //                 <ul>\n    //                     <li>Jsx List 1</li>\n    //                     <li>Jsx List 2</li>\n    //                     <li>Jsx List 3</li>\n    //                 </ul>\n    //             </>\n    //         )\n    //     }\n\n    //   render(){\n    //     const num1 = 1;\n    //     const num2 = 2;\n    //     const someObj = {name : \"Salim\", age : \"25\"}\n    //          return (\n    //         <>\n    //             <h1>App Component</h1>\n    //             <h3>testing js code</h3>\n    //             <span>{1 + 1}</span><br/>\n    //             <span>{num1 + num2}</span>\n    //             <h2>{new Date().toLocaleString()}</h2>\n    //             <h2>{this.add(1,1)}</h2>\n    //             <h1>My Name is {someObj.name}, my age is {someObj.age}</h1>\n    //             {3 > 2 ? \"3 is bigger than 2\" : \"its not\"}\n    //             {true && <h1>Thing i want to render</h1>}\n    //             {this.someJSX()}\n    //         </>\n    //         )\n    //     }\n\n    //------------------conditional rendering in jsx--------------------------\n    //     add(num1, num2){\n    //         return num1 + num2;\n    //     }\n\n    //     someJSX(){\n    //         return (\n    //             <>\n    //                 <ul>\n    //                     <li>Jsx List 1</li>\n    //                     <li>Jsx List 2</li>\n    //                     <li>Jsx List 3</li>\n    //                 </ul>\n    //             </>\n    //         )\n    //     }\n\n    //     condtionalRendering(){\n    //         if(3 < 0){\n    //             return(\n    //                <h1>3 is greater than 2</h1>\n    //             )\n    //         }else{\n    //             return(\n    //                 <h1>3 is less than 2</h1>\n    //              )\n    //         }\n    //     }\n\n    //   render(){\n    //     const num1 = 1;\n    //     const num2 = 2;\n    //     const someObj = {name : \"Salim\", age : \"25\"}\n    //          return (\n    //         <>\n    //             <h1>App Component</h1>\n    //             <h3>testing js code</h3>\n    //             <span>{1 + 1}</span><br/>\n    //             <span>{num1 + num2}</span>\n    //             <h2>{new Date().toLocaleString()}</h2>\n    //             <h2>{this.add(1,1)}</h2>\n    //             <h1>My Name is {someObj.name}, my age is {someObj.age}</h1>\n    //             {3 > 2 ? \"3 is bigger than 2\" : \"its not\"}\n    //             {true && <h1>Thing i want to render</h1>}\n    //             {this.someJSX()}\n    //             {this.condtionalRendering()}\n    //         </>\n    //         )\n    //     }\n\n// }\n\n\n// ------------------------------Session 2------------------------------\n// In this session, we're going to be going over functional components. \n// A functional component, is just a regular function that returns jsx. \n// We declare a functional component using 2 different syntax's. \n// We can use es5 styled functions as well as arrow functions. \n// We'll also be talking about props which is short form for properties. \n// A prop is data that we can send from parent component to child component. \n// Props are also immutable. Meaning that they cannot be changed.\n\n//function component\n// function A(){\n//     return(\n//         <h1>Hello I am function component A</h1>\n//     )\n// }\n\n// const B = ()=>{\n//     return(\n//         <h1>Hello I am arrow function component B</h1>\n//     )\n// }\n// class ClassAndFunctions extends Component{\n//     render(){\n//         return <>\n//         <h1>Hello I am Class Component</h1>\n//         <A/>\n//         <B/>\n//         </>\n//     }\n\n// }\n\n//function component\n// function A(props){\n//     console.log(props)\n//     // props.firstName = \"salim\"; //props are immutable i.e read only property , we cannot change props\n//     return(\n//         <div>\n//             <h1>Hello I am function component A</h1>\n//             <h2>{props.firstName}</h2>\n//             <h2>{props.lastName}</h2>\n//         </div>\n//     )\n// }\n\n// const B = (props)=>{\n//     return(\n//         <div>\n//             <h1>Hello I am function component A</h1>\n//             <h2>{props.name}</h2>\n//         </div>\n//     )\n// }\n\n// class C extends Component{\n//     render(){\n//         console.log(this.props);\n//         const {age, someMath, someArray} = this.props;\n//         return(\n//             <div>\n//                 <h1>Hello I am class component C</h1>\n//                 <h2>{age}</h2>\n//                 <h2>{someMath}</h2>\n//                 <h2>{someArray}</h2>\n//             </div>\n//         )\n//     }\n// }\n// class ClassAndFunctions extends Component{\n//     render(){\n//         return (\n//         <>\n//             <h1>Hello I am Class Component</h1>\n//             <A firstName=\"Haris\" lastName=\"xyz\"/>\n//             <B name=\"Aquib\"/>\n//             <C age={23} someMath={1 + 3} someArray={[1, 2, 3]}/>\n//         </>\n//         )\n//     }\n\n// }\n\n\n// In this session, we are going to be going over State within Class Based Components. \n// Now what state is, is an object that belongs to the component. \n// This object can be changed through a method called setState. \n// When changes are detected, this triggers a re-render which updates the UI. \n// An Event Handler is just a function that executes when an event occurs.\n\n//states and setState\n// class ClassAndFunctions extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         counter: 0\n//       };\n//     }\n\n//     incrementCounter() {\n//         this.setState({counter: this.state.counter + 1})\n//     }\n\n//     incrementCounter = () =>{\n//         this.setState({counter: this.state.counter + 1})\n//     }\n\n//     render() {\n//       return (\n//         <div>\n//           <h1>Hello state</h1>\n//           <h2>counter : {this.state.counter}</h2>\n//           <button type=\"button\" onClick={() => {this.setState({counter: this.state.counter + 1})}}>Click Me 1</button>\n//           <button type=\"button\" onClick={this.incrementCounter.bind(this)}>Click Me 2</button>\n//           <button type=\"button\" onClick={this.incrementCounter}>Click Me 3</button>\n//         </div>\n//       );\n//     }\n//   }\n\n// class ClassAndFunctions extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         brand: \"Ford\",\n//         model: \"Mustang\",\n//         color: \"red\",\n//         year: 1964\n//       };\n//     }\n//     changeColor = () => {\n//       this.setState({color: \"blue\"});\n//     }\n//     render() {\n//       return (\n//         <div>\n//           <h1>My {this.state.brand}</h1>\n//           <p>\n//             It is a {this.state.color}\n//             {this.state.model}\n//             from {this.state.year}.\n//           </p>\n//           <button type=\"button\" onClick={this.changeColor}>Change color</button>\n//         </div>\n//       );\n//     }\n//   }\n\n\n// how we can go about updating the Parent State from the Child Component. \n// We can accomplish this by passing a handler down as a prop to the Child Component. \n// The Child Component can then invoke that handler to update the Parent Components State. \n\n// class ClassAndFunctions extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         counter: 0\n//       };\n//     }\n\n//     incrementCounter = () =>{\n//         this.setState({counter: this.state.counter + 1})\n//     }\n\n//     render() {\n//       return (\n//         <div>\n//           <h1>Hello state</h1>\n//           <h2>counter : {this.state.counter}</h2>\n//           <Child incrementCounter={this.incrementCounter}/>\n//         </div>\n//       );\n//     }\n//   }\n\n//   const Child = ({incrementCounter}) => {\n//       return (\n//           <div>\n//                 <h1>Child Component</h1>\n//                 <button type=\"button\" onClick={() => {incrementCounter(10)}}>Click Me 3</button>\n//                 <button type=\"button\" onClick={incrementCounter.bind(this, 10)}>Click Me 3</button>\n//           </div>\n//       )\n//   }\n\n}\nexport default ClassAndFunctions;","import React, { Component } from 'react'\n\n//event handler in react\nclass ConditionalRendering extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value : \"waiting\",\n        showHeading : true\n      };\n    }\n\n    toggle = (event) =>{\n        this.setState({showHeading: !this.state.showHeading})\n    }\n\n    render() {\n      return (\n        <div>\n          <h1>Hello state</h1>\n         {this.state.showHeading ?  <h2>value : {this.state.value}</h2> : <h2>No Heading</h2> }\n         {/* {this.state.showHeading &&  <h2>value : {this.state.value}</h2>} */}\n          <button type=\"button\" onClick={this.toggle}>Toggle Me</button>\n        </div>\n      );\n    }\n  }\n\n  export default ConditionalRendering","import React, { Component } from 'react'\n\n//event handler in react\nclass EventHandler extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value : \"waiting\"\n      };\n    }\n\n    handleClick = (event) =>{\n        this.setState({value: \"clicked\"})\n    }\n\n    handleInput = (event) =>{\n        this.setState({value: event.target.value})\n    }\n\n    render() {\n      return (\n        <div>\n          <h1>Hello state</h1>\n          <h2>value : {this.state.value}</h2>\n          <button type=\"button\" onClick={this.handleClick}>Click Me 1</button>\n          <input type=\"text\" onChange={this.handleInput}/>\n        </div>\n      );\n    }\n  }\n\n  export default EventHandler","import React, { Component } from 'react'\n// import LifecycleB from './LifecycleB'\n\nclass Lifecycle extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tname: 'Vishwas'\n\t\t}\n\t\tconsole.log('LifecycleA constructor')\n\t}\n\n\tstatic getDerivedStateFromProps(props, state) {\n\t\tconsole.log('LifecycleA getDerivedStateFromProps')\n\t\treturn null\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('LifecycleA componentDidMount')\n\t}\n\n\t// shouldComponentUpdate() {\n\t// \tconsole.log('LifecycleA shouldComponentUpdate')\n\t// \treturn true\n\t// }\n\n\t// getSnapshotBeforeUpdate(prevProps, prevState) {\n\t// \tconsole.log('LifecycleA getSnapshotBeforeUpdate')\n    // return null\n\t// }\n\n\t// componentDidUpdate(prevProps, prevState, snapshot) {\n\t// \tconsole.log('LifecycleA componentDidUpdate')\n\t// }\n\n\t// changeState = () => {\n\t// \tthis.setState({\n\t// \t\tname: 'Codevolution'\n\t// \t})\n\t// }\n\n\trender() {\n\t\tconsole.log('LifecycleA render')\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* <button onClick={this.changeState}>Change state</button> */}\n\t\t\t\tLifecycleA\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Lifecycle","import React, { Component } from 'react'\n\n//event handler in react\nclass ListRendering extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        dish : [\n          {id : 1, name : \"pizza\", price : \"450rs\"},\n          {id : 2, name : \"burger\", price : \"400rs\"},\n          {id : 3, name : \"Fries\", price : \"200rs\"},\n        ]\n      };\n    }\n\n\n    render() {\n\n      const { dish } = this.state;\n      return (\n        <div>\n          <h1>Hello state</h1>\n            <ul>\n                <li>Dish name is {this.state.dish[0].name}, Price is {this.state.dish[0].price}</li>\n                <li>Dish name is {this.state.dish[1].name}, Price is {this.state.dish[1].price}</li>\n                <li>Dish name is {this.state.dish[2].name}, Price is {this.state.dish[2].price}</li>\n            </ul>\n\n            <ul>\n              {dish.map((item)=>{\n                return(\n                  <li>Dish name is {item.name}, Price is {item.price}</li>\n                )\n              })}\n            </ul>\n        </div>\n      );\n    }\n  }\n\n  export default ListRendering","import React, { useState } from 'react';\n\n// class ClassAndFunctions extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         counter: 0\n//       };\n//     }\n\n//     incrementCounter = () =>{\n//         this.setState({counter: this.state.counter + 1})\n//     }\n\n//     render() {\n//       return (\n//         <div>\n//           <h1>Hello state</h1>\n//           <h2>counter : {this.state.counter}</h2>\n//           <Child incrementCounter={this.incrementCounter}/>\n//         </div>\n//       );\n//     }\n//   }\n\n// Hooks\n// It gives to access state and lifecycle method inside the function component \n// Hooks are a new additional in react \n// They let you, use state & other react feature without writing the class \n// basically class are difficult to understand for our and compiler so hooks replace class component \n// Hooks make your app much cleaner by using functions \n\nfunction FunctionHooks() {\n  // Declare a new state variable, which we'll call \"count\"\n    const [count, setCount] = useState(0);\n\n    const incrementCounter = () =>{\n        setCount(count + 1)\n    }\n\n    return (\n        <div>\n        <p>You clicked {count} times</p>\n        <button onClick={incrementCounter}>\n            Click me\n        </button>\n        </div>\n    );\n}\n\nexport default FunctionHooks","import React, {Component} from \"react\";\nimport ClassAndFunctions from \"./ClassAndFunctions\";\nimport ConditionalRendering from \"./ConditionalRendering\";\nimport EventHandler from \"./EventHandler\";\nimport Lifecycle from \"./LifeCycle\";\nimport ListRendering from \"./ListRendering\";\nimport Styling from \"./Styling\";\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Blog from \"./Blog\";\nimport Contact from \"./Contact\";\nimport FunctionHooks from \"./FunctionHooks\";\n\n\n\nclass App extends Component{\n    render(){\n        return <>\n        {/* <ClassAndFunctions/>\n        <Lifecycle/> */}\n        {/* <EventHandler/> */}\n        {/* <ConditionalRendering/> */}\n        {/* <ListRendering/> */}\n        {/* <Styling/> */}\n        <FunctionHooks/>\n\n\n{/* npm install react-router-dom */}\n        {/* <Router>\n            <div>\n                <Link to=\"/\">Home</Link>\n            </div>\n            <div>\n                <Link to=\"/blogs\">Blog Articles</Link>\n            </div>\n            <div>\n                <Link to=\"/contact\">Contact Me</Link>\n            </div>\n\n                <hr />\n\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route path=\"/blogs\">\n                    <Blog />\n                </Route>\n                <Route path=\"/contact\">\n                    <Contact />\n                </Route>\n            </Switch>\n        </Router> */}\n        </>\n    }\n\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App';\n\n// const element = React.createElement(\"h1\",null,\"Hello World\");\n// const element = <h1>hello JSX</h1>;\n\n// const element = React.createElement(\"ul\",null,\n//                                     React.createElement(\"li\",null,\"list 1\"),\n//                                     React.createElement(\"li\",null,\"list 2\"),\n//                                     React.createElement(\"li\",null,\"list 3\"));\n\n// const element = <ul>\n//                     <li>List 1</li>\n//                     <li>List 2</li>\n//                     <li>List 3</li>\n//                 </ul>;\n\n// ReactDOM.render(element,document.getElementById('root'));\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n"],"sourceRoot":""}